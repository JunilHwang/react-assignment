name: CI Assignment 6

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'packages/assignment-6/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: run build
        run: |
          pnpm install
          pnpm -F assignment-6 tsc
          pnpm -F assignment-6 build
        continue-on-error: true
      - uses: actions/github-script@v6
        if: failure()
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '빌드에 실패했습니다. 로그를 확인해주세요.'
            })

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: run lint
        run: |
          pnpm install
          pnpm -F assignment-6 lint:report
        continue-on-error: true
      - name: Comment ESLint results
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs')
            const eslintResultsFile = './packages/assignment-6/eslint-report'
            if (fs.existsSync(eslintResultsFile)) {
              const eslintResults = fs.readFileSync(eslintResultsFile, 'utf-8')
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ESLint Results\n\n${eslintResults}`
              })
            }

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: run test
        id: run-tests
        continue-on-error: true
        run: |
          pnpm install
          pnpm -F assignment-6 test:coverage
      - name: Report test success with coverage
        if: steps.run-tests.outcome == 'success'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs')
            const coverageReport = fs.readFileSync('./packages/assignment-6/.coverage/coverage-summary.json', 'utf8')
            const coverage = JSON.parse(coverageReport)
            const totalCoverage = coverage.total.lines.pct
            const branchCoverage = coverage.total.branches.pct
            const functionCoverage = coverage.total.functions.pct
            const statementCoverage = coverage.total.statements.pct
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 테스트 성공 ✅
              ### 커버리지 결과
              - 라인 커버리지: ${totalCoverage}%
              - 브랜치 커버리지: ${branchCoverage}%
              - 함수 커버리지: ${functionCoverage}%
              - 구문 커버리지: ${statementCoverage}%`
            })
      - name: Report test failure
        if: steps.run-tests.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 테스트 실패 ❌
              테스트가 실패하여 커버리지 정보를 생성할 수 없습니다.
              자세한 오류 내용은 CI 로그를 확인해주세요.`
            })
      - name: Exit with test result
        if: steps.run-tests.outcome == 'failure'
        run: exit 1

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: run lhci
        continue-on-error: true
        run: |
          pnpm install
          pnpm -F assignment-6 build
          pnpm -F assignment-6 lhci
      - uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const lhciDir = './packages/assignment-6/.lighthouseci';
            const jsonReports = fs.readdirSync(lhciDir).filter(f => f.endsWith('.json'));
            const latestReport = jsonReports.sort().reverse()[0];
            const reportPath = path.join(lhciDir, latestReport);
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            
            const scores = {
              performance: report.categories.performance.score * 100,
              accessibility: report.categories.accessibility.score * 100,
              'best-practices': report.categories['best-practices'].score * 100,
              seo: report.categories.seo.score * 100
            };
            
            const formatScore = (score) => `${score.toFixed(0)}%`;
            
            const body = `## Lighthouse 성능 측정 결과
            
            | 카테고리 | 점수 |
            |----------|------|
            | Performance | ${formatScore(scores.performance)} |
            | Accessibility | ${formatScore(scores.accessibility)} |
            | Best Practices | ${formatScore(scores['best-practices'])} |
            | SEO | ${formatScore(scores.seo)} |`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  assign_reviewer:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: Assign reviewer
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const reviewers = ['junilhwang']
            const selectedReviewer = reviewers.sort(() => 0.5 - Math.random()).pop();
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `@${selectedReviewer} 님, 리뷰를 부탁드립니다.`
            })
